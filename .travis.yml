language: generic

#1 decirle a travis que se necesita docker
sudo: required
services:
  - docker

#2 construir la imagen usando Dockerfile.dev
before_install:
  - docker build -t lophophoro/dockertest -f Dockerfile.dev .

#3 decirle a travis como correr la suit
#si este paso termina con un codigo distinto de 0, travis asumira que el codigo esta roto
script:
  - docker run -e CI=true lophophoro/dockertest npm run test
#-e CI=true permite finalizar los tests, de otro modo docker quedaria esperando alguna orden nueva

#4 deployment: instrucciones para travis para conectar a aws
#a) services -> Elastic Beanstalk -> crear entorno -> anotar la region ("us-east-2" en http://dockertest-env.eba-2pk8qmji.us-east-2.elasticbeanstalk.com)
#b) services -> S3 -> seleccionar el entorno creado y copiar el nombre del bucket (elasticbeanstalk-us-east-2-121607027350). el bucket_path es el nombre de la app (app: "docker-test")
#c) services -> IAM -> users -> add user -> "Programmatic access" y "AWS Management Console access" -> existing policies ->"AWSElasticBeanstalkFullAccess" y "IAMUserChangePassword" -> anotar api keys
#d) https://travis-ci.com ->My Repositories->lophophoro/dockertest->More options->settings->Environment Variables-> establecer AWS_ACCESS_KEY y AWS_SECRET_KEY con los datos del paso anterior

deploy:
  provider: elasticbeanstalk
  region: "us-east-2"
  app: "docker-test"
  env: "DockerTest-env"
  bucket_name: "elasticbeanstalk-us-east-2-121607027350"
  bucket_path: "docker-test"
  on:
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
